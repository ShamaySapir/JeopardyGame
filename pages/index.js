import Head from "next/head";
import styles from "../styles/Home.module.css";
import { Grid, Fab, Typography, Snackbar, Alert } from "@mui/material";
import Card from "../components/Card";
import { groupBy, map, reduce, sortBy } from "lodash";
import React, { useEffect, useState } from "react";
import fetchClient from "../tools/requestor";
export default function Home() {
  const [cards, setCards] = useState([]);
  const [scores, setScores] = useState({
    team1: { score: 0, displayname: "קבוצה 1" },
    team2: { score: 0, displayname: "קבוצה 2" },
  });
  const [answeredQuestions, setAnsweredQuestions] = useState([]);
  const [currentTeam, setCurrentTeam] = useState(0);
  const setScore = (correct, score) => {
    setScores((scores) => ({
      ...scores,
      [`team${currentTeam + 1}`]: {
        ...scores[`team${currentTeam + 1}`],
        score:
          scores[`team${currentTeam + 1}`].score + correct ? +score * 100 : 0,
      },
    }));
    setCurrentTeam((currentTeam) => (currentTeam + 1) % 2);
  };
  const getAllQuestions = async () => {
    const rawQuestionsData = await fetchClient("listQuestions");
    const questions = reduce(
      rawQuestionsData.data,
      (acc, questionData) => {
        const question = {
          id: questionData.id,
          question: questionData.attributes.text,
          subject: questionData.attributes.category.substr(1),
          level: questionData.attributes.rank,
          type: questionData.attributes.type,
          possibleAnswers: questionData.attributes.possibleAnswers,
          correctAnswer: questionData.attributes.correctAnswer,
        };
        acc.push(question);
        return acc;
      },
      []
    );
    return questions;
  };
  useEffect(() => {
    async function fetchQuestions() {
      const cardsData = await getAllQuestions();
      const groupedByCategory = groupBy(cardsData, "subject");
      setCards(groupedByCategory);
    }
    fetchQuestions();
  }, []);
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main></main>
      <Grid container>
        {map(cards, (cardsCategory, subject) => {
          return (
            <Grid
              container
              item
              xs
              key={subject}
              direction="column"
              padding={2}
              spacing={2}
            >
              <Grid xs item textAlign="center">
                <Typography variant="h4">{subject}</Typography>
              </Grid>
              {map(sortBy(cardsCategory, "level"), ({ id, ...rest }) => (
                <Card
                  disabled={answeredQuestions.includes(id)}
                  key={id}
                  {...rest}
                  id={id}
                  scoresController={setScore}
                  markAnswered={setAnsweredQuestions}
                />
              ))}
            </Grid>
          );
        })}
      </Grid>
      <Fab variant="extended" size="large" color="primary">
        <Grid container>
          {Object.keys(scores).map((team) => (
            <Grid xs item padding={2} spacing={2} key={team}>
              <Typography>{`${scores[team].displayname} : ${scores[team].score}`}</Typography>
            </Grid>
          ))}
        </Grid>
      </Fab>
      <Snackbar open autoHideDuration={6000}>
        <Alert severity="success" sx={{ width: "100%" }}>
          {currentTeam}
        </Alert>
      </Snackbar>
    </div>
  );
}
