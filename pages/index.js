import Head from "next/head";
import styles from "../styles/Home.module.css";
import { Grid, Fab } from "@mui/material";
import Card from "../components/Card";
import { groupBy, map, reduce } from "lodash";
import React, { useEffect, useState } from "react";
import fetchClient from "../tools/requestor";
export default function Home() {
  const NUM_OF_ROWS = 5;
  const NUM_OF_COLS = 5;

  const [cards, setCards] = useState([]);
  const [scores, setScores] = useState({ team1: 0, team2: 0 });
  const [answeredQuestions, setAnsweredQuestions] = useState([]);
  const [currentTeam, setCurrentTeam] = useState(0);
  const setScore = (correct, score) => {
    setScores((scores) => ({
      ...scores,
      [`team${currentTeam + 1}`]:
        scores[`team${currentTeam + 1}`] + correct ? +score * 100 : 0,
    }));
    setCurrentTeam((currentTeam) => (currentTeam + 1) % 2);
  };
  const getAllQuestions = async () => {
    const rawQuestionsData = await fetchClient("listQuestions");
    const questions = reduce(
      rawQuestionsData.data,
      (acc, questionData) => {
        const question = {
          id: questionData.id,
          question: questionData.attributes.text,
          subject: questionData.attributes.category.substr(1),
          level: questionData.attributes.rank,
          type: questionData.attributes.type,
          possibleAnswers: questionData.attributes.possibleAnswers,
          correctAnswer: questionData.attributes.correctAnswer,
        };
        acc.push(question);
        return acc;
      },
      []
    );
    return questions;
  };
  useEffect(() => {
    async function fetchQuestions() {
      const cardsData = await getAllQuestions();
      const groupedByLevel = groupBy(cardsData, "level");
      setCards(groupedByLevel);
    }
    fetchQuestions();
  }, []);
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main></main>
      <Grid container>
        {map(cards, (cardsLevel, level) => {
          return (
            <Grid
              container
              item
              key={level}
              direction="row"
              padding={2}
              spacing={2}
            >
              {map(cardsLevel, ({ id, ...rest }) => (
                <Card
                  disabled={answeredQuestions.includes(id)}
                  key={id}
                  {...rest}
                  id={id}
                  level={level}
                  scoresController={setScore}
                  markAnswered={setAnsweredQuestions}
                />
              ))}
            </Grid>
          );
        })}
      </Grid>
      <Fab variant="extended" size="small" color="primary" aria-label="add">
        קבוצה 1: {scores.team1} קבוצה 2: {scores.team2}
      </Fab>
    </div>
  );
}
